- Class: meta
  Course: SWIRLIFY-CARPENTRIES-COURSE
  Lesson: Funciones
  Author: Ignacio Lych
  Type: Standard
  Organization: FCEA-UDELAR
  Version: 1.0.0

- Class: text
  Output: Bienvenido a la octava lección de este curso, denominada 'Funciones'.
  
- Class: text
  Output: En esta lección aprenderemos a definir en R tus propias funciones y utilizarlas especificando sus parámetros. 
  
- Class: text
  Output: ¿Qué es una función? Son una secuencia de operaciones, que se almacenan para ser utilizadas de forma rápida y simple en cualquier momento.

- Class: text
  Output: Las funciones tienen tres elementos básicos (un nombre, un input y un output). Trabajemos con un ejemplo. 
  
- Class: script
  Output: La siguiente función recibe dos parametros (a y b) y devuelve la suma de ambos.
  AnswerTests: expr_creates_var(correctName = "my_sum")
  Hint: Escribe submit() para continuar
  Script: my_sum.R
  
- Class: text
  Output: Como puedes ver, se ha generado en el entorno de trabajo una función llamada my_sum

- Class: cmd_question
  Output: Pongamosla a prueba. Utiliza my_sum, especificandole 2 y 5 como inputs
  CorrectAnswer: my_sum(2,5)
  AnswerTests: omnitest(correctExpr='my_sum(2,5)')
  Hint: Escribe "my_sum(2,5)" para utilizar la función 

- Class: script
  Output: Trabaja en el script hasta crear la función correcta.
  AnswerTests: expr_creates_var(correctName = "kelvin_celsius")
  Hint: Escribe submit() para continuar
  Script: kelvin_celsius.R

- Class: cmd_question
  Output: Utiliza kelvin_celsius para convertir la temperatura 282° Kelvin a Celsius
  CorrectAnswer: kelvin_celsius(282)
  AnswerTests: omnitest(correctExpr='kelvin_celsius(282)');calculates_same_value('8.85')
  Hint: Escribe "kelvin_celsius(282)" para utilizar la función 
  
- Class: text
  Output: Puedes ver cómo las funciones proporcionan una manera eficiente de hacer que el código R sea reutilizable y modular.
  
- Class: text
  Output: Debemos tener en cuenta que es importante garantizar que las funciones solo funcionen en los casos de uso previstos. Por ejemplo, la funcion que acabas de crear solo funcionará apropiadamente si el parámetro de entrada es un numero. 
  
- Class: text
  Output: Esto nos introduce al concepto de programación defensiva. La programación defensiva nos alienta a probar las condiciones frecuentemente y arrojar un error si algo está mal. 

- Class: script
  Output: Trabaja en el script kelvin_celsius_defensive.R
  AnswerTests: expr_creates_var(correctName = "kelvin_celsius_defensive")
  Hint: Escribe submit() para continuar
  Script: kelvin_celsius_defensive.R

- Class: text
  Output: La programacion defensiva ha funcionado y ha evitado que la función se utilice con un input invalido.

- Class: text
  Output: En esta lección has aprendido a trabajar con tus propias funciones. Seguiremos profundizando el estudio de este objeto en las próximas lecciones.
  
- Class: mult_question
  Output: ¿Deseas enviar tu progreso? 
  AnswerChoices: Yes;No
  CorrectAnswer: any_of_exprs('Yes', 'No', 1, 2)
  AnswerTests: submit_log()
