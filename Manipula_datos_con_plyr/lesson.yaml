- Class: meta
  Course: My_New_Course
  Lesson: Manipulación de datos con Plyr
  Author: Mauricio García
  Type: Standard
  Organization: FCEA-UDELAR
  Version: 1.0.0

- Class: text
  Output: Bienvenido a la décima lección de este curso, denominada `Manipulación de datos con Plyr`.
  
- Class: text
  Output: En esta lección aprenderemos sobre el paquete Plyr, Plyr opera sobre Listas, Data Frames y Arrays (matrices).

- Class: text
  Output: Las operaciones que realiza son de división (splitting), aplicación (apply) y recomibación (recombine) de los datos de salida como un objeto de datos.

- Class: text
  Output: Las funciones se nombran según la estructura de datos de entrada, y la estructura de datos de salida, Array, List, o Data Frame. La primera letra corresponde a los datos de entrada, la segunda letra a los datos de salida, y el resto de la función se llama ply.

- Class: text
  Output: Las funciones a su vez tienen tres argumentos, xxply(data, variables, fun). El conjunto de datos, la variable utilizada para dividir, y la función específica que se aplicará a cada parte dividida.
  
- Class: cmd_question
  Output: Échale un vistazo a los datos gapminder, que hemos descargado para ti.
  CorrectAnswer: gapminder
  AnswerTests: omnitest(correctExpr='gapminder')
  Hint: Prueba ejecutando el siguiente comando gapminder

- Class: text
  Output: Verás que tiene 6 columnas, el país, el continente, el año, la esperanza de vida, la población y el PIB per cápita.
  
- Class: text
  Output: Imagina ahora que queremos quedarnos con una tabla que resuma por continente, el promedio del PIB. Introduciremos un Data Frame, y queremos que nos devuelva un Data Frame. Para ello, hemos cargado en esta lección una función que calcula el PIB, multiplicando el PIB per cápita por la población, llamada calcGDP. De esta manera, se agrega una nueva columna, llamada gdp.

- Class: cmd_question
  Output:  Prueba entonces con el siguiente comando, ddply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))
  CorrectAnswer: ddply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))
  AnswerTests: omnitest(correctExpr='ddply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))')
  Hint: Escribe ddply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))
  
- Class: text
  Output: Lo que pudimos hacer aquí es dividir los datos según la variable continente, aplicar la función de promedio del PIB sobre la variable gdp, y lograr que nos devuelva (o recombine) un resumen con los datos que nos interesan.
  
- Class: cmd_question
  Output: Imagina que ahora quieres que, en vez de devolver un Data Frame, devuelva una lista ¿cómo lo harías?
  CorrectAnswer: dlply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))
  AnswerTests: omnitest(correctExpr='dlply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp))')
  Hint: Si cambiamos la segunda letra de la función ply, lo conseguiremos. Escribe dlply(.data = calcGDP(gapminder), .variables = "continent", .fun = function(x) mean(x$gdp)).
  
- Class: cmd_question
  Output: Podríamos ahora querer que nos devolviera un Data Frame, pero que además tenga el promedio del PIB por año. Basta con agregarle el argumento year dentro de las variables (variables = c("continent", "year")).
  CorrectAnswer: ddply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))
  AnswerTests: omnitest(correctExpr='ddply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))')
  Hint: Escribe ddply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))
  
- Class: cmd_question
  Output: Prueba ahora hacer lo mismo, pero logrando que nos devuelva un Array. 
  CorrectAnswer: daply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))
  AnswerTests: omnitest(correctExpr='daply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))
  Hint: Simplemente cambia la segunda letra por una a, de manera que quede daply(.data = calcGDP(gapminder), .variables = c("continent", "year"), .fun = function(x) mean(x$gdp))

- Class: text
  Output: Como verás, los datos quedaron presentados de una manera mucho más legible.
  
- Class: text
  Output: Esta función te será muy útil a la hora de manipular tus datos en R, debido a que consigue realizar cálculos y mostrar tablas de manera rápida y eficiente
  
- Class: text
  Output: En esta lección has aprendido a utilizar el paquete plyr. Seguiremos profundizando en estos contenidos durante las próximas lecciones.

- Class: script
  Output: ¿Tienes un grupo asignado? Trabaja con el script llamado mi_grupo. Asegúrese de guardar el script antes de escribir submit().
  AnswerTests: expr_creates_var(correctName = "mi_grupo")
  Hint: Escribe submit() para continuar
  Script: mi_grupo.R
  
- Class: mult_question
  Output: ¿Deseas enviar tu progreso? 
  AnswerChoices: Yes;No
  CorrectAnswer: any_of_exprs('Yes', 'No', 1, 2)
  AnswerTests: submit_log()
